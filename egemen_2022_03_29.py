import re

TTT = "TTT-Phenylalanine" 
TTC = "TTC-Phenylalanine"
TTA = "TTA-Leucine" 
TTG = "TTG-Leucine"


CTT = "CTT-Leucine"
CTC = "CTC-Leucine"
CTA = "CTA-Leucine"
CTG = "CTG-Leucine"


ATT = "ATT-Isoleucine (Ile/I)"
ATC = "ATC-Isoleucine"
ATA = "ATA-Isoleucine"
ATG = "ATG-Methionine (Met/M) Start1"


GTT = "GTT-Valine (Val/V)"
GTC = "GTC-Valine"
GTA = "GTA-Valine"
GTG = "GTG-Valine"

TCT = "TCT-Serine (Ser/S)"
TCC = "TCC-Serine"
TCA = "TCA-Serine"
TCG = "TCG-Serine"


CCT = "CCT-Proline (Pro/P)"
CCC = "CCC-Proline"
CCA = "CCA-Proline"
CCG = "CCG-Proline"

ACT = "ACT-Threonine (Thr/T)"
ACC = "ACC-Threonine"
ACA = "ACA-Threonine"
ACG = "ACG-Threonine"

GCU = "GCU-Alanine (Ala/A)"
GCC = "GCC-Alanine"
GCA = "GCA-Alanine"
GCG = "GCG-Alanine"

TAT = "TAT-Tyrosine (Tyr/Y)"
TAC = "TAC-Tyrosine"
TAA = "TAA-Ochre/Stop"
TAG = "TAG-Amber/Stop"

CAT = "CAT-Histidine (His/H)"
CAC = "CAC-Histidine"
CAA = "CAA-Glutamine (Gln/Q)"
CAG = "CAG-Glutamine"


AAT = "AAT-(Asn/N)Asparagine"
AAC = "AAC-(Asn/N)Asparagine"
AAA = "AAA-(Lys/K)Lysine"
AAG = "AAG-(Lys/K)Lysine"

GAT = "GAT-(Asp/D)Aspartic acid"
GAC = "GAC-(Asp/D)Aspartic acid"
GAA = "GAA-(Glu/E)Glutamic acid"
GAG = "GAG-(Glu/E)Glutamic acid"

TGT = "TGT-(Cys/C)Cysteine"
TGC = "TGC-(Cys/C)Cysteine"
TGA = "TGA-Opal (Stop)"
TGG = "TGG-(Trp/W)Tryptophan"

CGT = "CGT-(Arg/R)Arginine"
CGC = "CGC-(Arg/R)Arginine"
CGA = "CGA-(Arg/R)Arginine"
CGG = "CGG-(Arg/R)Arginine"

AGT = "AGT-(Ser/S)Serine"
AGC = "AGC-(Ser/S)Serine"
AGA = "AGA-(Arg/R)Arginine"
AGG = "AGG-(Arg/R)Arginine"

GGT = "GGT-(Gly/G)Glycine"
GGC = "GGC-(Gly/G)Glycine"
GGA = "GGA-(Gly/G)Glycine"
GGG = "GGG-(Gly/G)Glycine"


#test_dic = {"ATG": "ATG-Methionine (Met/M) Start1", "ACG": "ACG-Threonine", "ACA": "ACA-Threonine"}

array = ["A", "T", "G", "C"]

def encrypt(string, length):
    return ' '.join(string[i:i+length] for i in range(0,len(string),length))

pattern = re.compile(r'(?=(ATG(?:...)*?)(?=TAG|TGA|TAA))')
Seq = Seq= "CCTCAGCGAGGACAGCAAGGGACTAGCCAGGAGGGAGAACAGAAACTCCAGAACATCTTGGAAATAGCTCCCAGAAAAGCAAGCAGCCAACCAGGCAGGTTCTGTCCCTTTCACTCACTGGCCCAAGGCGCCACATCTCCCTCCAGAAAAGACACCATGAGCACAGAAAGCATGATCCGCGACGTGGAACTGGCAGAAGAGGCACTCCCCCAAAAGATGGGGGGCTTCCAGAACTCCAGGCGGTGCCTATGTCTCAGCCTCTTCTCATTCCTGCTTGTGGCAGGGGCCACCACGCTCTTCTGTCTACTGAACTTCGGGGTGATCGGTCCCCAAAGGGATGAGAAGTTCCCAAATGGCCTCCCTCTCATCAGTTCTATGGCCCAGACCCTCACACTCAGATCATCTTCTCAAAATTCGAGTGACAAGCCTGTAGCCCACGTCGTAGCAAACCACCAAGTGGAGGAGCAGCTGGAGTGGCTGAGCCAGCGCGCCAACGCCCTCCTGGCCAACGGCATGGATCTCAAAGACAACCAACTAGTGGTGCCAGCCGATGGGTTGTACCTTGTCTACTCCCAGGTTCTCTTCAAGGGACAAGGCTGCCCCGACTACGTGCTCCTCACCCACACCGTCAGCCGATTTGCTATCTCATACCAGGAGAAAGTCAACCTCCTCTCTGCCGTCAAGAGCCCCTGCCCCAAGGACACCCCTGAGGGGGCTGAGCTCAAACCCTGGTATGAGCCCATATACCTGGGAGGAGTCTTCCAGCTGGAGAAGGGGGACCAACTCAGCGCTGAGGTCAATCTGCCCAAGTACTTAGACTTTGCGGAGTCCGGGCAGGTCTACTTTGGAGTCATTGCTCTGTGAAGGGAATGGGTGTTCATCCATTCTCTACCCAGCCCCCACTCTGACCCCTTTACTCTGACCCCTTTATTGTCTACTCCTCAGAGCCCCCAGTCTGTATCCTTCTAACTTAGAAAGGGGATTATGGCTCAGGGTCCAACTCTGTGCTCAGAGCTTTCAACAACTACTCAGAAACACAAGATGCTGGGACAGTGACCTGGACTGTGGGCCTCTCATGCACCACCATCAAGGACTCAAATGGGCTTTCCGAATTCACTGGAGCCTCGAATGTCCATTCCTGAGTTCTGCAAAGGGAGAGTGGTCAGGTTGCCTCTGTCTCAGAATGAGGCTGGATAAGATCTCAGGCCTTCCTACCTTCAGACCTTTCCAGATTCTTCCCTGAGGTGCAATGCACAGCCTTCCTCACAGAGCCAGCCCCCCTCTATTTATATTTGCACTTATTATTTATTATTTATTTATTATTTATTTATTTGCTTATGAATGTATTTATTTGGAAGGCCGGGGTGTCCTGGAGGACCCAGTGTGGGAAGCTGTCTTCAGACAGACATGTTTTCTGTGAAAACGGAGCTGAGCTGTCCCCACCTGGCCTCTCTACCTTGTTGCCTCCTCTTTTGCTTATGTTTAAAACAAAATATTTATCTAACCCAATTGTCTTAATAACGCTGATTTGGTGACCAGGCTGTCGCTACATCACTGAACCTCTGCTCCCCACGGGAGCCGTGACTGTAATCGCCCTACGGGTCATTGAGAGAAATAA"
tes = pattern.findall(Seq) #forward search
tes = str(tes[0])
result = Seq.index("ATG")
last = result + len(tes)
valid_seq = tes+Seq[last:last+3]
total_seq_char = len(tes+Seq[last:last+3])
print("Total Sekans: " + str(Seq))
print("ATG'den sonrasÄ±: " + encrypt(valid_seq, 3))
